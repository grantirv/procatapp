test_that("dateRangeInput updates on button clicks", {
shiny::testServer(period_server, args = list(start_date = "2000-01-01", end_date = "2024-12-15"), {
session$setInputs(btns = "ALL", date_range = as.Date(c("2000-01-01", "2024-12-15")))
session$setInputs(btns = "1Y")
expect_equal(input$date_range, as.Date(c("2023-12-15", "2024-12-15")))
})
test_that("dateRangeInput updates on button clicks", {
shiny::testServer(period_server, args = list(start_date = "2000-01-01", end_date = "2024-12-15"), {
session$setInputs(btns = "ALL", date_range = as.Date(c("2000-01-01", "2024-12-15")))
session$setInputs(btns = "1Y")
browser()
expect_equal(input$date_range, as.Date(c("2023-12-15", "2024-12-15")))
})
inputs
input
input$proxy1-date_range
input$`proxy1-date_range`
input$btns
input$date_range
session$flushReact()
input$date_range
input$setInputs(btns = "10Y")
session$setInputs(btns = "10Y")
input$date_range
quit()
exit()
q
stopApp()
shiny::stopApp()
devtools::load_all(".")
test_that("period_input works", {
pi <- period_input(id = "test", label = "Test", width = "480px")
expect_s3_class(pi, "shiny.tag")
})
?shinytest::ShinyDriver
install.packages("shinytest")
install.packages("shinytest2")
library(shinytest)
detach("package:shinytest", unload = TRUE)
library(shinytest2)
?record_test
devtools::load_all(".")
period_app()
app <- AppDriver$new(period_app())
app
app$get_screenshot()
?record_test
record_test(app)
pwd
devtools::load_all(".")
period_app()
library(shinytest2)
?record_test
runApp('tests/testthat/apps/period')
setwd("/Users/Grant/Documents/packages/procatapp/tests/testthat/apps")
?record_test
app <- AppDriver$new(period_app)
app <- period_app()
app
class(app)
app <- AppDriver$new(app)
class(app)
app$view()
app$stop()
app <- AppDriver$new(period_app())
?record_test
app$get_values()
record_test(period_app())
getwd()
record_test("period")
devtools::load_all("/Users/Grant/Documents/packages/procatapp")
record_test("period")
library(shinytest2)
record_test("period")
?record_test
library(shinytest2)
?record_test
getwd()
devtools::load_all("/Users/Grant/Documents/packages/procatapp")
period_input
record_test("period")
devtools::load_all("/Users/Grant/Documents/packages/procatapp")
library(shinytest2)
record_test("period")
?shinytest2::test_app
shinytest2::use_shinytest2()
getwd()
setwd("/Users/Grant/Documents/packages/procatapp")
devtools::load_all(".")
?shinytest2::use_shinytest2()
shinytest2::use_shinytest2()
?shinytest2::load_app_env
period_app <- function(start_date = "2000-01-01", end_date = "2024-12-15") {
ui <- fluidPage(
br(),
period_input("period"),
textOutput("dates")
)
server <- function(input, output, session) {
date_range <- period_server("period", start_date = start_date, end_date = end_date)
output$dates <- renderText({
glue::glue("{format(date_range()[1])} to {format(date_range()[2])}")
})
}
shinyApp(ui, server)
}
period_app()
shiny_app = period_app(start_date = "2000-01-01", end_date = "2024-01-20")
app = shinytest2::AppDriver$new(shiny_app, name = "period_app")
shinytest2::record_test(app)
test_that("period module produces expected output", {
shiny_app = period_app(start_date = "2000-01-01", end_date = "2024-01-20")
app = shinytest2::AppDriver$new(shiny_app, name = "period_app")
app$set_inputs(`period-btns` = "MTD")
app$expect_values(output = "dates")
app$set_inputs(`period-btns` = "QTD")
app$expect_values(output = "dates")
})
?shinytest::load_app_new
?shinytest2::load_app_new
?shinytest2::load_app_env
shiny_app = period_app(start_date = "2000-01-01", end_date = "2024-01-20")
app = shinytest2::AppDriver$new(shiny_app, name = "period_app")
app$set_inputs(`period-btns` = "MTD")
app$expect_values(output = "dates")
?loadSupport
test_that("period module produces expected output", {
shiny_app = period_app(start_date = "2000-01-01", end_date = "2024-01-20")
app = shinytest2::AppDriver$new(shiny_app, name = "period_app")
app$set_inputs(`period-btns` = "MTD")
app$expect_values(output = "dates")
app$set_inputs(`period-btns` = "QTD")
app$expect_values(output = "dates")
})
traceback()
debug(shiny::loadSupport)
# Load application support files into testing environment
shinytest2::load_app_env()
?shinytest2::load_app_env
?suppressWarnings
?shinytest2::AppDriver
testthat::snapshot_review('010-period/')
devtools::load_all(".")
?h1
?period_input
?period_server
?shiny::updateDateRangeInput
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app(
app_data_path = qu::f4quant("data/procat_appdata")
)
?period_server
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app(
app_data_path = qu::f4quant("data/procat_appdata")
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app(
app_data_path = qu::f4quant("data/procat_appdata")
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app(
app_data_path = qu::f4quant("data/procat_appdata")
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app(
app_data_path = qu::f4quant("data/procat_appdata")
)
# create attribution table
date_range <- period_server(
id = "period2",
start_date = "2010-01-01",
end_date = "2024-12-31"
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app(
app_data_path = qu::f4quant("data/procat_appdata")
)
body <- function() {
dashboardBody(
tabItems(
tabItem(
tabName = "welcome",
htmltools::h1("Welcome to ProCat"),
htmltools::p("This is a simple Shiny app to demonstrate the use of the golem package.")
),
tabItem(
tabName = "brinson",
htmltools::h1("Brinson Analysis"),
period_input(id = "period", label = "Select analysis dates:", width = "480px"),
textOutput("dates")
# gt::gt_output("brinson_table")
)
}
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app(
app_data_path = qu::f4quant("data/procat_appdata")
)
left_ui <- tagList(
selectizeInput(
inputId = "fund",
label = NULL,
choices = c(
"FOGGEQUI",
"FOGPRIV",
"OGEUROP",
"OLLCINTDE",
"FOGCHEQ",
"FOGASIA",
"FOGASPAC",
"FOGEMEQU"
),
selected = character(0),
multiple = FALSE,
options = list(
placeholder = "Select Fund"
),
width = "140px"
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app(
app_data_path = qu::f4quant("data/procat_appdata")
)
tagList(
# Leave this function for adding external resources
golem_add_external_resources(),
# Your application UI logic
dashboardPage(
header = header(),
sidebar = sidebar(),
controlbar = dashboardControlbar(),
footer = dashboardFooter("This is the footer"),
dark = FALSE,
body = body()
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app(
app_data_path = qu::f4quant("data/procat_appdata")
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app(
app_data_path = qu::f4quant("data/procat_appdata")
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app(
app_data_path = qu::f4quant("data/procat_appdata")
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app(
app_data_path = qu::f4quant("data/procat_appdata")
)
?need
?gpa::AttributionTable
brinson_ui <- function(
id
){
ns <- shiny::NS(id)
# select date range for analysis
dates <- period_input(id = ns("period"), label = "Select analysis dates:", width = "480px")
# select row field
row <- selectizeInput(
inputId = "rows",
label = "Rows",
choices = list(
"RGN"   = "rgn",
"CTRY"  = "ctry",
"GICS1" = "gics1",
"GICS2" = "gics2",
"GICS3" = "gics3",
"GICS4" = "gics4",
"STOCK" = "infocode"
),
selected = "gics1",
multiple = FALSE,
options = list(
placeholder = "Select row field"
),
width = "140px"
)
# select column field
column <- selectizeInput(
inputId = "columns",
label = "Columns",
choices = list(
"Effects" = "effect",
"Year"    = "year",
"Quarter" = "quarter",
"Month"   = "month"
),
selected = "effect",
multiple = FALSE,
options = list(
placeholder = "Select column field"
),
width = "140px"
)
# display brinson table
table <- gt::gt_output("brinson_table")
# layout
out <- div(
dates,
br(),
row,
br(),
column,
br(),
table
)
return(out)
}
brinson_ui()
brinson_ui("test")
?moduleServer
devtools::load_all(".")
brinson_app()
?shinyApp
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
?selectizeInput
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
?fluidRow
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
input
input$columns
observe(input$columns)
sink()
observe(input$columns)
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
input
input$impl
observe(input$impl)
devtools::load_all(".")
brinson_app()
a <- 1
a
input
input$`period-date_range`
input$rows
input$columns
devtools::load_all(".")
brinson_app()
input
input$`brinson-rows`
input$rows
devtools::load_all(".")
brinson_app()
as.formula(paste(input$rows, "~", input$columns))
devtools::load_all(".")
brinson_app()

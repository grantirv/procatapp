library(reactable)
library(shiny)
g_output <- gt_output("iris_table")
ui <- fluidPage(
shiny::fluidRow(
column(width=4,
h4("Great"),
tags$div(id="great",
style="height:400px;",
g_output)
)
server <- function(input, output, session) {
output$iris_table <- render_gt({
iris |>
gt() |>
tab_options(
container.height = px(400),
container.padding.y = px(0)
) |>
tab_style(
style = css(position = "sticky", top = px(-1), zIndex = 100),
locations = list(cells_column_spanners(), cells_column_labels())
)
})
}
shinyApp(ui, server)
library(tidyverse)
library(gt)
library(reactable)
library(shiny)
g_output <- gt_output("iris_table")
ui <- fluidPage(
shiny::fluidRow(
column(width=4,
h4("Great"),
tags$div(id="great",
style="height:400px;",
g_output)
)
server <- function(input, output, session) {
output$iris_table <- render_gt({
iris |>
gt() |>
tab_options(
container.height = px(400),
container.padding.y = px(0)
) |>
tab_style(
style = css(position = "sticky", top = 0, zIndex = 100),
locations = list(cells_column_spanners(), cells_column_labels())
)
})
}
shinyApp(ui, server)
library(tidyverse)
library(gt)
library(reactable)
library(shiny)
g_output <- gt_output("iris_table")
ui <- fluidPage(
shiny::fluidRow(
column(width=4,
h4("Great"),
tags$div(id="great",
style="height:400px;",
g_output)
)
server <- function(input, output, session) {
output$iris_table <- render_gt({
iris |>
gt() |>
tab_options(
container.height = px(400),
container.padding.y = px(0)
) |>
tab_style(
style = css(position = "sticky", top = 0),
locations = list(cells_column_spanners(), cells_column_labels())
)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$iris_table <- render_gt({
iris |>
gt() |>
# tab_options(
#   container.height = px(400),
#   container.padding.y = px(0)
# ) |>
tab_style(
style = css(position = "sticky", top = 0),
locations = list(cells_column_spanners(), cells_column_labels())
)
})
}
shinyApp(ui, server)
brinson_app()
install.packages("cli")
pkgs <- c("foo", "bar", "foobar")
cli_alert_success("Downloaded {length(pkgs)} packages.")
library(cli)
pkgs <- c("foo", "bar", "foobar")
cli_alert_success("Downloaded {length(pkgs)} packages.")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app(
app_data_path = qu::f4quant("data/procat_appdata")
)
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
?gt::render_gt
gpa::AttributionTable
?gpa::AttributionTable
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
?gt::render_gt
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
add_js_file("brinson")
golem::add_js_file("brinson")
?golem_add_external_resources
library(golem)
?golem_add_external_resources
?bundle_resources
devtools::load_all(".")
?shinyApp
brinson_app()
brinson_ui()
brinson_ui("test")
shiny::tags$head(
shiny::tags$script(src = "brinson.js")
)
js <- shiny::tags$head(
shiny::tags$script(src = "brinson.js")
)
js
cat(js)
class(js)
js$children
devtools::load_all(".")
?add_resource_path
?bundle_resources
add_resource_path
bundle_resources(
path = app_sys("app/www"),
app_title = "ProCat"
)
res <- bundle_resources(path = app_sys("app/www"))
res <- bundle_resources(path = app_sys("app/www", title = "brinson"))
res
res <- bundle_resources(path = app_sys("app/www"), app_title = "brinson"))
res <- bundle_resources(path = app_sys("app/www"), app_title = "brinson")
res
shinyalert::useShinyalert()
install.packages("shinyalert")
shinyalert::useShinyalert()
app_sys("app/www")
tags$head(
golem::bundle_resources(
path = golem::app_sys("app/www"),
app_title = "ProCat"
)
),
tags$head(
golem::bundle_resources(
path = golem::app_sys("app/www"),
app_title = "ProCat"
)
?app_sys
getwd()
devtools::load_all(".")
ui <- tagsList(
tags$head(
tags$script(src = "inst/app/www/brinson.js")
),
fluidPage(
brinson_ui(id, js_src = "inst/app/www/brinson.js")
)
ui <- htmltools::tagsList(
tags$head(
tags$script(src = "inst/app/www/brinson.js")
),
fluidPage(
brinson_ui(id)
)
ui <- htmltools::tagList(
tags$head(
tags$script(src = "inst/app/www/brinson.js")
),
fluidPage(
brinson_ui(id)
)
id = "brinson"
ui <- htmltools::tagList(
tags$head(
tags$script(src = "inst/app/www/brinson.js")
),
fluidPage(
brinson_ui(id)
)
ui
tags$head(
tags$script(src = "inst/app/www/brinson.js")
)
devtools::load_all(".")
brinson_app()
golem_add_external_resources()
sink()
brinson_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app(
app_data_path = qu::f4quant("data/procat_appdata")
)
devtools::load_all(".")
brinson_app()
# test app
brinson_app <- function(
id = "brinson",
atb_data = gpa::europe_3y,
...
){
ui <- tagList(
golem_add_external_resources(),
fluidPage(
brinson_ui(id)
)
server <- function(input, output, session){
brinson_server(id = id, atb_data = atb_data)
}
with_golem_options(
app = shinyApp(
ui = ui,
server = server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
?with_golem_options
?includeScript
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
getwd()
htmltools::includeScript("inst/app/www/brinson.js")
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
?shinyApp
brinson_app()
devtools::load_all(".")
brinson_app()
?addResourcePath
resourcePaths()
app_sys("app/www")
add_resource_path
app_sys("app/www")
add_resource_path("www", app_sys("app/www"))
resourcePaths()
brinson_app()
traceback()
devtools::load_all(".")
brinson_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app(
app_data_path = qu::f4quant("data/procat_appdata")
)
?shinyApp
devtools::load_all(".")
binson_app()
brinson_app()
devtools::load_all(".")
brinson_app()
traceback()
?runApp
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
brinson_app
brinson_app()
?div
devtools::load_all(".")
?div
div(class = "gt_output", "hello")
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
?gt::gt_output
?gt::render_gt
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
?verbatimTextOutput
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
?tagList
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
input
input$`brinson-columns`
observe(input$`brinson-columns`)
devtools::load_all(".")
brinson_app()
input
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
library(shiny)
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
input
input$debug
input$`brinson-rows`
input
input$clicked_cell
?moduleServer
?verbatimTextOutput
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
clicked_cell()
brinson_app()
clicked_cell()
sink()
clicked_cell()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
input$clicked_cell
brinson_app()
input$clicked_cell
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
input$debug
brinson_app()
input$clicked_cell
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
input
brinson_app()
input
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
library(Shiny)
library(shiny)
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
devtools::load_all(".")
brinson_app()
input
brinson_app()
